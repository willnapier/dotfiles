#!/usr/bin/env nu
# Clean false unresolved markers (?[[...]]) from Forge vault
# Only removes ? if the target file actually exists in subdirectories

let forge = $env.FORGE

if ($forge | is-empty) or not ($forge | path exists) {
    print "❌ FORGE environment variable not set or doesn't exist"
    exit 1
}

print $"🔍 Scanning ($forge) for ?[[...]] markers..."

# Get all markdown files with ? markers
let files_with_markers = (rg '\?\[\[' --type md --files-with-matches $forge | lines)

print $"📊 Found ($files_with_markers | length) files with ? markers"
print ""

mut total_cleaned = 0
mut total_kept = 0

for file in $files_with_markers {
    print $"📄 Processing: ($file | path relative-to $forge)"

    let content = (open $file)
    mut new_content = $content

    # Find all ?[[ markers
    let markers = ($content | rg '\?\[\[([^\]]+)\]\]' --only-matching --no-filename | lines)

    for marker in $markers {
        # Extract the link target - remove ?[[ prefix and ]] suffix
        let target = ($marker | str replace --regex '^\?\[\[' '' | str replace --regex '\]\]$' '' | str trim)

        # Search for the file recursively (use glob pattern to avoid regex issues)
        let matching_files = (fd --type f --extension md --glob $"($target).md" $forge | lines)

        if not ($matching_files | is-empty) {
            # File exists! Remove the ?
            $new_content = ($new_content | str replace --all $marker $"[[($target)]]")
            $total_cleaned += 1
            print $"  ✅ Cleaned: ($target)"
            print $"     Found at: ($matching_files | first)"
        } else {
            # File doesn't exist - keep the ?
            $total_kept += 1
            print $"  ⚠️  Kept: ($target) - truly unresolved"
        }
    }

    # Write back if changed
    if $new_content != $content {
        $new_content | save --force $file
    }
}

print ""
print "🎉 Cleanup complete!"
print $"  ✅ Cleaned: ($total_cleaned) false positives"
print $"  ⚠️  Kept: ($total_kept) truly unresolved links"
