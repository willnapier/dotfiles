#!/opt/homebrew/bin/nu

# DOTTER WORKFLOW SETUP
# Sets up the complete workflow to prevent Dotter deployment gaps

def main [] {
    let dotfiles_root = $"($env.HOME)/dotfiles"
    
    print "🔧 Setting up Dotter Anti-Orphan Workflow..."
    
    # 1. Install pre-commit hook
    let git_hooks_dir = $"($dotfiles_root)/.git/hooks"
    let pre_commit_hook = $"($git_hooks_dir)/pre-commit"
    
    print $"📋 Installing git pre-commit hook..."
    
    if ($pre_commit_hook | path exists) {
        # Backup existing hook
        cp $pre_commit_hook $"($pre_commit_hook).backup"
        print $"   Backed up existing hook to ($pre_commit_hook).backup"
    }
    
    # Create the hook
    $"#!/bin/bash
# Dotter Orphan Prevention Hook
/Users/williamnapier/.local/bin/dotter-pre-commit-hook
" | save -f $pre_commit_hook
    
    chmod +x $pre_commit_hook
    print "✅ Git pre-commit hook installed"
    
    # 2. Create symlinks for the new tools
    let bin_dir = $"($env.HOME)/.local/bin"
    
    print "🔗 Creating tool symlinks..."
    
    let tools = [
        "dotter-safe-create",
        "dotter-pre-commit-hook", 
        "dotter-workflow-setup"
    ]
    
    for tool in $tools {
        let source = $"($dotfiles_root)/scripts/($tool)"
        let target = $"($bin_dir)/($tool)"
        
        if ($target | path exists) {
            rm $target
        }
        
        ln -sf $source $target
        print $"   ✅ ($tool) -> ($target)"
    }
    
    # 3. Add aliases to Nushell config for easier usage
    let nushell_config = $"($env.HOME)/.config/nushell/config.nu"
    
    print "📝 Adding convenience aliases..."
    
    let aliases = [
        "alias dsc = dotter-safe-create",
        "alias orphans = dotter-orphan-detector-v2",
        "alias dotter-check = dotter-orphan-detector-v2"
    ]
    
    for alias in $aliases {
        # Check if alias already exists
        let existing = do { rg -q $alias $nushell_config } | complete
        if $existing.exit_code != 0 {
            $"# Added by dotter-workflow-setup
($alias)" | save -a $nushell_config
            print $"   ✅ Added: ($alias)"
        } else {
            print $"   ℹ️  Already exists: ($alias)"
        }
    }
    
    # 4. Test the current system
    print "\n🧪 Testing current system..."
    
    cd $dotfiles_root
    let orphan_check = do { ^dotter-orphan-detector-v2 } | complete
    
    if $orphan_check.exit_code == 0 {
        let orphan_count = ($orphan_check.stdout | lines | where ($it | str contains "ORPHANED:") | length)
        if $orphan_count > 0 {
            print $"⚠️  Found ($orphan_count) orphaned files"
            print "   Run 'orphans' to see details and fix them"
        } else {
            print "✅ No orphaned files found!"
        }
    }
    
    # 5. Success summary
    print "\n🎉 Dotter Anti-Orphan Workflow Setup Complete!"
    print ""
    print "🛠️  Available Commands:"
    print "   dsc [path] [--target] [--platform]  - Create new config file safely"
    print "   dotter-safe-create                  - Full command name"
    print "   orphans                            - Check for orphaned files"
    print "   dotter-check                       - Same as orphans"
    print ""
    print "🔒 Git Protection:"
    print "   Pre-commit hook will block commits if orphaned files exist"
    print ""
    print "📖 Usage Examples:"
    print "   dsc helix/themes/my-theme.toml"
    print "   dsc scripts/my-new-script --platform macos"
    print "   dsc yazi/plugins/my-plugin.lua --target ~/.config/yazi/plugins/my-plugin.lua"
    print ""
    print "🚨 Workflow:"
    print "   1. Use 'dsc' instead of creating files manually"
    print "   2. Files are automatically added to Dotter config"
    print "   3. Deployed immediately with verification"
    print "   4. Git pre-commit ensures no orphans slip through"
    
    print "\n✅ You can now create config files without forgetting Dotter deployment!"
}