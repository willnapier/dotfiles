#!/usr/bin/env nu
# Git Auto-Push Watcher - Automatically pushes local changes to GitHub
# Monitors dotfiles for local changes and pushes them automatically

def main [] {
    let dotfiles_dir = $"($env.HOME)/dotfiles"
    let log_file = $"($env.HOME)/.local/share/git-auto-push-watcher.log"
    let lock_file = "/tmp/git-auto-push-watcher.lock"
    let last_push = "/tmp/git-last-push"

    # Ensure log directory exists
    mkdir ($log_file | path dirname)

    # Smart lock file handling with stale lock detection
    if ($lock_file | path exists) {
        let lock_age = ((date now) - (ls $lock_file | get 0.modified))
        let age_minutes = ($lock_age / 1min)

        if $age_minutes > 10 {
            let timestamp = (date now | format date "%H:%M:%S")
            let cleanup_msg = $"[($timestamp)] Cleaning up stale lock file"
            $cleanup_msg | save --append $log_file
            print $cleanup_msg
            rm -f $lock_file
        } else {
            print "❌ Auto-push watcher already running (recent lock file)"
            exit 1
        }
    }

    # Create lock file
    "running" | save --force $lock_file

    print "🚀 Starting Git auto-push watcher"
    print $"👀 Watching: ($dotfiles_dir)"
    print $"📝 Logging to: ($log_file)"

    # Initial push timestamp
    (date now | format date "%s") | save --force $last_push

    # Check for uncommitted changes every 2 minutes
    loop {
        sleep 2min

        cd $dotfiles_dir

        # Check for uncommitted changes
        let status_result = (do { git status --porcelain } | complete)

        if $status_result.exit_code == 0 and not ($status_result.stdout | is-empty) {
            let now = (date now | format date "%s" | into int)
            let last = (try { open $last_push | into int } catch { 0 })
            let elapsed = $now - $last

            # Debounce - only push once every 5 minutes
            if $elapsed > 300 {
                let timestamp = (date now | format date "%H:%M:%S")
                let message = $"[($timestamp)] Local changes detected - auto-pushing"
                $message | save --append $log_file
                print $message

                # Auto-commit and push changes
                print "📤 Auto-committing and pushing changes..."

                let add_result = (do { git add . } | complete)
                if $add_result.exit_code == 0 {
                    let commit_msg = $"Auto-commit: Local changes from ($env.USER)@(hostname)

🤖 Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"

                    let commit_result = (do { git commit -m $commit_msg } | complete)
                    if $commit_result.exit_code == 0 {
                        let push_result = (do { git push origin main } | complete)
                        if $push_result.exit_code == 0 {
                            let success_msg = $"[($timestamp)] ✅ Successfully pushed changes to GitHub"
                            $success_msg | save --append $log_file
                            print "✅ Changes pushed to GitHub!"
                        } else {
                            let error_msg = $"[($timestamp)] ❌ Push failed: ($push_result.stderr)"
                            $error_msg | save --append $log_file
                            print $"❌ Push failed: ($push_result.stderr)"
                        }
                    } else {
                        # No changes to commit (might be only whitespace changes)
                        let no_changes_msg = $"[($timestamp)] ℹ️ No changes to commit"
                        $no_changes_msg | save --append $log_file
                    }
                } else {
                    let error_msg = $"[($timestamp)] ❌ Git add failed: ($add_result.stderr)"
                    $error_msg | save --append $log_file
                    print $"❌ Git add failed: ($add_result.stderr)"
                }

                # Update last push time
                (date now | format date "%s") | save --force $last_push
            }
        }
    }

    # Cleanup on exit
    rm -f $lock_file
    print "🛑 Auto-push watcher stopped"
}