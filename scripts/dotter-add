#!/usr/bin/env nu
# dotter-add - Semi-automatically add a file to Dotter management
# Usage: dotter-add <file-path>

def main [file_path: string] {
    let dotfiles_root = "/dotfiles"
    let dotter_config = $dotfiles_root + "/.dotter/global.toml"
    
    # Validate input file
    let expanded_path = ($file_path | str replace "~" $env.HOME)
    if not ($expanded_path | path exists) {
        print $"‚ùå File not found: ($expanded_path)"
        exit 1
    }
    
    # Convert to relative path for cleaner config
    let relative_path = ($expanded_path | str replace $env.HOME "~")
    
    # Determine source path in dotfiles
    let source_path = determine_source_path $expanded_path $dotfiles_root
    let source_full_path = $dotfiles_root + "/" + $source_path
    
    print $"üìÅ Adding to Dotter management:"
    print $"   Source: ($source_full_path)"
    print $"   Target: ($relative_path)"
    
    # Create source directory if needed
    let source_dir = ($source_full_path | path dirname)
    if not ($source_dir | path exists) {
        print $"üìÅ Creating directory: ($source_dir)"
        mkdir $source_dir
    }
    
    # Copy file to dotfiles (preserving permissions)
    print "üìÑ Copying file to dotfiles..."
    cp -p $expanded_path $source_full_path
    
    # Add to Dotter config
    print "‚öôÔ∏è Adding to Dotter configuration..."
    let config_entry = $'"($source_path)" = "($relative_path)"'
    
    # Read current config as raw text
    let current_config = (open --raw $dotter_config)
    
    # Find the [shared.files] section and add the new entry
    let lines = ($current_config | lines)
    mut new_lines = []
    mut in_shared_files = false
    mut added = false
    
    for line in $lines {
        if ($line | str trim) == "[shared.files]" {
            $in_shared_files = true
            $new_lines = ($new_lines | append $line)
        } else if ($line | str starts-with "[") and $in_shared_files {
            # End of shared.files section, add our entry before next section
            if not $added {
                $new_lines = ($new_lines | append $config_entry)
                $added = true
            }
            $in_shared_files = false
            $new_lines = ($new_lines | append $line)
        } else {
            $new_lines = ($new_lines | append $line)
        }
    }
    
    # If we're still in shared.files section at end of file, add it now
    if $in_shared_files and not $added {
        $new_lines = ($new_lines | append $config_entry)
    }
    
    # Write updated config
    $new_lines | str join "\n" | save -f $dotter_config
    
    # Deploy the changes
    print "üöÄ Deploying with Dotter..."
    cd $dotfiles_root
    dotter deploy
    
    # Verify the symlink was created
    if ($expanded_path | path type) == "symlink" {
        let link_target = (ls -la $expanded_path | get target.0)
        if $link_target == $source_full_path {
            print "‚úÖ SUCCESS: File is now Dotter-managed!"
            print $"   Symlink: ($relative_path) -> ($source_full_path)"
        } else {
            print $"‚ö†Ô∏è WARNING: Symlink points to unexpected target: ($link_target)"
        }
    } else {
        print "‚ùå ERROR: Symlink was not created properly"
        exit 1
    }
}

# Determine appropriate source path within dotfiles based on target location
def determine_source_path [target_path: string, dotfiles_root: string] {
    if ($target_path | str contains ".config/helix") {
        "helix/" + ($target_path | path basename)
    } else if ($target_path | str contains ".config/nushell") {
        "nushell/" + ($target_path | path basename)
    } else if ($target_path | str contains ".config/zellij") {
        "zellij/" + ($target_path | path basename)
    } else if ($target_path | str contains ".config/yazi") {
        "yazi/" + ($target_path | path basename)
    } else if ($target_path | str contains ".config/nvim") {
        let relative = ($target_path | str replace ($target_path | str replace "/nvim/.*" "/nvim") "")
        "nvim" + $relative
    } else if ($target_path | str contains ".local/bin") {
        "scripts/" + ($target_path | path basename)
    } else if ($target_path | str contains ".config") {
        let app_name = ($target_path | str replace ($env.HOME + "/.config/") "" | split row "/" | get 0)
        let file_name = ($target_path | path basename)
        $app_name + "/" + $file_name
    } else {
        # Default: preserve structure relative to home
        ($target_path | str replace ($env.HOME + "/") "")
    }
}