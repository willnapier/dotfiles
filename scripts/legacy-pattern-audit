#!/usr/bin/env nu

# Legacy Pattern Audit & Detection Tool
# Finds problematic legacy command patterns across dotfiles

def main [] {
    print "🔍 Scanning for legacy command patterns..."
    print "=" * 60

    let dotfiles_path = "/Users/williamnapier/dotfiles"

    # Critical patterns that cause actual failures
    let critical_patterns = [
        {
            pattern: "2>/dev/null",
            problem: "Bash redirection in Nushell functions",
            fix: "Use | complete and check exit_code",
            severity: "CRITICAL"
        },
        {
            pattern: "\\bsed\\b(?!.*#.*sed)",  # sed not in comments
            problem: "Legacy sed usage",
            fix: "Replace with sd",
            severity: "HIGH"
        },
        {
            pattern: "\\bgrep\\b -[^s]",  # grep with flags (not in command substitution)
            problem: "Legacy grep usage",
            fix: "Replace with rg",
            severity: "HIGH"
        },
        {
            pattern: "\\bfind\\b.*-name",
            problem: "Legacy find usage",
            fix: "Replace with fd",
            severity: "MEDIUM"
        },
        {
            pattern: "\\bawk\\b.*\\{print",
            problem: "Legacy awk usage",
            fix: "Replace with cut or Nushell",
            severity: "MEDIUM"
        }
    ]

    # File types to check (exclude git internals, backups, samples)
    let file_patterns = [
        "scripts/*",
        "nushell/*.nu",
        "yazi/*.toml",
        "zellij/*.kdl",
        "helix/*.toml"
    ]

    mut total_issues = 0

    for pattern_info in $critical_patterns {
        print $"\n🔍 Checking for: ($pattern_info.problem)"
        print $"Pattern: ($pattern_info.pattern)"
        print $"Severity: ($pattern_info.severity)"
        print "-" * 40

        let matches = (
            $file_patterns
            | each { |glob_pattern|
                try {
                    rg $pattern_info.pattern $"($dotfiles_path)/($glob_pattern)" -n --no-heading
                } catch { "" }
            }
            | str join "\n"
            | lines
            | where $it != ""
        )

        if ($matches | length) > 0 {
            print $"❌ Found ($matches | length) issues:"
            for match in $matches {
                print $"   ($match)"
            }
            print $"💡 Fix: ($pattern_info.fix)"
            $total_issues = $total_issues + ($matches | length)
        } else {
            print "✅ No issues found"
        }
    }

    print $"\n📊 SUMMARY"
    print "=" * 60
    if $total_issues == 0 {
        print "🎉 No critical legacy patterns detected!"
        print "✅ Your codebase is fully modernized"
    } else {
        print $"🚨 Found ($total_issues) total issues requiring attention"
        print "🔧 Run the suggested fixes above to modernize these patterns"
    }

    print $"\n💡 Excluded from scan (intentionally legacy):"
    print "   • Git hooks and samples (/.git/)"
    print "   • Backup files (*backup*, *.sample)"
    print "   • Cross-platform bash scripts (where shell redirection is valid)"
}