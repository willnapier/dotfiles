#!/usr/bin/env bash
# dotter-complete-audit - Comprehensive drift detection for ALL dotter configurations
# This script checks EVERY entry in dotter config, not just main files

set -euo pipefail

DOTFILES_DIR="/dotfiles"
DOTTER_CONFIG="$DOTFILES_DIR/.dotter/global.toml"
REPORT_FILE="/tmp/dotter-complete-audit-report.md"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Counters
TOTAL_ENTRIES=0
PROTECTED_ENTRIES=0
VULNERABLE_ENTRIES=0
MISSING_SOURCE_FILES=0
BROKEN_SYMLINKS=0
DIRECTORY_SYMLINKS=0

echo -e "${BLUE}🔍 COMPREHENSIVE DOTTER DRIFT AUDIT${NC}"
echo "========================================"
echo ""
echo "📋 Analyzing ALL entries in dotter configuration..."

# Create detailed report
cat > "$REPORT_FILE" << 'EOF'
# Dotter Complete Audit Report

## Executive Summary

This report analyzes EVERY entry in the dotter configuration to detect drift vulnerabilities.

## Findings

EOF

# Function to check if a path exists and what type it is
check_path_type() {
    local path="$1"
    if [[ -L "$path" ]]; then
        echo "symlink"
    elif [[ -d "$path" ]]; then
        echo "directory"
    elif [[ -f "$path" ]]; then
        echo "file"
    else
        echo "missing"
    fi
}

# Function to extract target path from dotter entry
expand_target_path() {
    local target="$1"
    # Handle ~ expansion
    target="${target/#\~/$HOME}"
    echo "$target"
}

echo "📊 COMPLETE CONFIGURATION ANALYSIS"
echo "=================================="

# Parse dotter config and check each entry
while IFS= read -r line; do
    # Skip comments and empty lines
    [[ "$line" =~ ^[[:space:]]*# ]] && continue
    [[ "$line" =~ ^[[:space:]]*$ ]] && continue
    
    # Look for file entries: "source" = "target" or "source" = { target = "target", ... }
    if [[ "$line" =~ ^[[:space:]]*\"([^\"]+)\"[[:space:]]*=[[:space:]]*(.+)$ ]]; then
        SOURCE_PATH="${BASH_REMATCH[1]}"
        ENTRY_DEF="${BASH_REMATCH[2]}"
        
        TOTAL_ENTRIES=$((TOTAL_ENTRIES + 1))
        
        # Extract target path
        if [[ "$ENTRY_DEF" =~ \"([^\"]+)\"[[:space:]]*$ ]]; then
            # Simple form: "source" = "target"
            TARGET_PATH="${BASH_REMATCH[1]}"
            TYPE="file"
        elif [[ "$ENTRY_DEF" =~ target[[:space:]]*=[[:space:]]*\"([^\"]+)\" ]]; then
            # Complex form: { target = "target", type = "..." }
            TARGET_PATH="${BASH_REMATCH[1]}"
            if [[ "$ENTRY_DEF" =~ type[[:space:]]*=[[:space:]]*\"symbolic\" ]]; then
                TYPE="symbolic_directory"
                DIRECTORY_SYMLINKS=$((DIRECTORY_SYMLINKS + 1))
            else
                TYPE="file"
            fi
        else
            continue  # Skip malformed entries
        fi
        
        # Expand paths
        SOURCE_FULL="$DOTFILES_DIR/$SOURCE_PATH"
        TARGET_FULL=$(expand_target_path "$TARGET_PATH")
        
        # Check source file/directory exists
        SOURCE_TYPE=$(check_path_type "$SOURCE_FULL")
        TARGET_TYPE=$(check_path_type "$TARGET_FULL")
        
        # Determine status
        STATUS="❌ VULNERABLE"
        ISSUE=""
        
        if [[ "$SOURCE_TYPE" == "missing" ]]; then
            STATUS="💥 CRITICAL"
            ISSUE="Source missing: $SOURCE_FULL"
            MISSING_SOURCE_FILES=$((MISSING_SOURCE_FILES + 1))
        elif [[ "$TARGET_TYPE" == "missing" ]]; then
            STATUS="💥 CRITICAL" 
            ISSUE="Target missing: $TARGET_FULL"
            BROKEN_SYMLINKS=$((BROKEN_SYMLINKS + 1))
        elif [[ "$TARGET_TYPE" == "symlink" ]]; then
            # Check if symlink points to correct source
            LINK_TARGET=$(readlink "$TARGET_FULL")
            if [[ "$LINK_TARGET" == "$SOURCE_FULL" ]]; then
                STATUS="✅ PROTECTED"
                PROTECTED_ENTRIES=$((PROTECTED_ENTRIES + 1))
            else
                STATUS="❌ VULNERABLE"
                ISSUE="Symlink points to: $LINK_TARGET (expected: $SOURCE_FULL)"
                VULNERABLE_ENTRIES=$((VULNERABLE_ENTRIES + 1))
            fi
        elif [[ "$TYPE" == "symbolic_directory" && "$TARGET_TYPE" == "directory" ]]; then
            # Directory symlink - check if it's actually a symlink
            if [[ -L "$TARGET_FULL" ]]; then
                LINK_TARGET=$(readlink "$TARGET_FULL")
                if [[ "$LINK_TARGET" == "$SOURCE_FULL" ]]; then
                    STATUS="⚠️  DIRECTORY_SYMLINK"
                    ISSUE="Directory symlink (drift-prone)"
                else
                    STATUS="❌ VULNERABLE"
                    ISSUE="Directory symlink points to wrong location"
                    VULNERABLE_ENTRIES=$((VULNERABLE_ENTRIES + 1))
                fi
            else
                STATUS="❌ VULNERABLE"
                ISSUE="Should be directory symlink but is regular directory"
                VULNERABLE_ENTRIES=$((VULNERABLE_ENTRIES + 1))
            fi
        else
            STATUS="❌ VULNERABLE"
            ISSUE="Not properly symlinked"
            VULNERABLE_ENTRIES=$((VULNERABLE_ENTRIES + 1))
        fi
        
        # Color-code output
        case "$STATUS" in
            *"PROTECTED"*) echo -e "${GREEN}$STATUS${NC} $SOURCE_PATH → $TARGET_PATH" ;;
            *"DIRECTORY_SYMLINK"*) echo -e "${YELLOW}$STATUS${NC} $SOURCE_PATH → $TARGET_PATH" ;;
            *"CRITICAL"*) echo -e "${RED}$STATUS${NC} $SOURCE_PATH → $TARGET_PATH" ;;
            *) echo -e "${RED}$STATUS${NC} $SOURCE_PATH → $TARGET_PATH" ;;
        esac
        
        if [[ -n "$ISSUE" ]]; then
            echo -e "   ${YELLOW}⚠️  $ISSUE${NC}"
        fi
        
        # Add to report
        cat >> "$REPORT_FILE" << EOF
### $SOURCE_PATH → $TARGET_PATH

- **Status**: $STATUS
- **Source**: $SOURCE_FULL ($SOURCE_TYPE)
- **Target**: $TARGET_FULL ($TARGET_TYPE)
- **Type**: $TYPE
EOF
        if [[ -n "$ISSUE" ]]; then
            echo "- **Issue**: $ISSUE" >> "$REPORT_FILE"
        fi
        echo "" >> "$REPORT_FILE"
    fi
done < "$DOTTER_CONFIG"

echo ""
echo "📈 AUDIT SUMMARY"
echo "================"
echo -e "${BLUE}Total entries analyzed:${NC} $TOTAL_ENTRIES"
echo -e "${GREEN}Protected entries:${NC} $PROTECTED_ENTRIES"
echo -e "${RED}Vulnerable entries:${NC} $VULNERABLE_ENTRIES" 
echo -e "${RED}Missing source files:${NC} $MISSING_SOURCE_FILES"
echo -e "${RED}Broken symlinks:${NC} $BROKEN_SYMLINKS"
echo -e "${YELLOW}Directory symlinks (drift-prone):${NC} $DIRECTORY_SYMLINKS"

# Add summary to report
cat >> "$REPORT_FILE" << EOF

## Summary Statistics

- **Total entries analyzed**: $TOTAL_ENTRIES
- **Protected entries**: $PROTECTED_ENTRIES
- **Vulnerable entries**: $VULNERABLE_ENTRIES
- **Missing source files**: $MISSING_SOURCE_FILES  
- **Broken symlinks**: $BROKEN_SYMLINKS
- **Directory symlinks (drift-prone)**: $DIRECTORY_SYMLINKS

## Risk Assessment

EOF

# Risk assessment
if [[ $VULNERABLE_ENTRIES -gt 0 || $MISSING_SOURCE_FILES -gt 0 || $BROKEN_SYMLINKS -gt 0 ]]; then
    echo -e "${RED}🚨 CRITICAL ISSUES DETECTED${NC}"
    echo "   - Your configuration is vulnerable to drift"
    echo "   - Immediate action required"
    echo ""
    
    echo "**CRITICAL ISSUES DETECTED** - Configuration is vulnerable to drift." >> "$REPORT_FILE"
elif [[ $DIRECTORY_SYMLINKS -gt 0 ]]; then
    echo -e "${YELLOW}⚠️  DRIFT RISK DETECTED${NC}"
    echo "   - Directory symlinks are prone to failure"
    echo "   - Consider converting to individual files"
    echo ""
    
    echo "**DRIFT RISK DETECTED** - Directory symlinks are prone to failure." >> "$REPORT_FILE"
else
    echo -e "${GREEN}✅ CONFIGURATION PROTECTED${NC}"
    echo "   - All entries are properly protected"
    echo "   - No drift vulnerabilities detected"
    echo ""
    
    echo "**CONFIGURATION PROTECTED** - All entries are properly protected." >> "$REPORT_FILE"
fi

# Recommendations
cat >> "$REPORT_FILE" << 'EOF'

## Recommendations

1. **Convert directory symlinks to individual files** - Directory symlinks with `type = "symbolic"` are unreliable
2. **Fix broken symlinks immediately** - Missing targets cause configuration failures
3. **Restore missing source files** - Source files in dotfiles directory are required
4. **Run this audit regularly** - Detect drift before it causes issues
5. **Use individual file symlinks** - Most reliable approach for configuration management

## Next Steps

- Run `dotter deploy --force` to fix simple symlink issues
- Manually convert directory symlinks to individual file entries
- Restore missing files from backups
- Rerun audit to verify fixes

EOF

echo "📄 DETAILED REPORT"
echo "=================="
echo "Complete audit report saved to: $REPORT_FILE"
echo ""
echo "🔧 RECOMMENDED ACTIONS"
echo "====================="

if [[ $VULNERABLE_ENTRIES -gt 0 || $MISSING_SOURCE_FILES -gt 0 || $BROKEN_SYMLINKS -gt 0 ]]; then
    echo "1. 🚨 IMMEDIATE: Fix critical issues"
    echo "   - Restore missing source files from backups"
    echo "   - Run 'dotter deploy --force' to fix symlinks"
    echo ""
fi

if [[ $DIRECTORY_SYMLINKS -gt 0 ]]; then
    echo "2. ⚠️  PRIORITY: Convert directory symlinks"
    echo "   - Edit .dotter/global.toml"
    echo "   - Replace directory symlinks with individual files"
    echo "   - Redeploy with 'dotter deploy --force'"
    echo ""
fi

echo "3. 🔄 ONGOING: Run regular audits"
echo "   - Add 'dotter-complete-audit' to daily routine"
echo "   - Monitor for new vulnerabilities"
echo ""

exit $([[ $VULNERABLE_ENTRIES -eq 0 && $MISSING_SOURCE_FILES -eq 0 && $BROKEN_SYMLINKS -eq 0 ]] && echo 0 || echo 1)