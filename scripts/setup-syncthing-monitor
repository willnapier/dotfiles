#!/usr/bin/env nu

# Setup Syncthing Connection Monitor - Cross-platform automatic healing
# Installs and configures automatic Syncthing connection monitoring

def main [action?: string] {
    match $action {
        "install" => { install_monitor }
        "uninstall" => { uninstall_monitor }
        "status" => { show_status }
        "logs" => { show_logs }
        _ => { show_usage }
    }
}

def install_monitor [] {
    let platform = detect_platform

    print "🔧 Installing Syncthing connection monitor..."
    print $"🖥️  Platform detected: ($platform)"

    # Ensure directories exist
    mkdir ~/.local/share

    match $platform {
        "macos" => { install_macos }
        "linux" => { install_linux }
        _ => {
            print $"❌ Unsupported platform: ($platform)"
            exit 1
        }
    }

    print "✅ Syncthing monitor installed successfully!"
    print "🚀 Monitor will automatically start on system boot"
    print "📊 Check status with: setup-syncthing-monitor status"
    print "📝 View logs with: setup-syncthing-monitor logs"
}

def install_macos [] {
    print "🍎 Installing macOS LaunchAgent..."

    let plist_source = $"($env.HOME)/dotfiles/macos/launchd/com.williamnapier.syncthing-monitor.plist"
    let plist_target = $"($env.HOME)/Library/LaunchAgents/com.williamnapier.syncthing-monitor.plist"

    # Copy plist file
    cp $plist_source $plist_target

    # Load the service
    launchctl unload $plist_target 2>/dev/null  # Unload if already loaded
    launchctl load $plist_target

    print $"✅ LaunchAgent installed: ($plist_target)"
}

def install_linux [] {
    print "🐧 Installing systemd user service..."

    let service_source = $"($env.HOME)/dotfiles/systemd/syncthing-monitor.service"
    let service_target = $"($env.HOME)/.config/systemd/user/syncthing-monitor.service"

    # Ensure systemd user directory exists
    mkdir $"($env.HOME)/.config/systemd/user"

    # Copy service file
    cp $service_source $service_target

    # Reload systemd and enable service
    systemctl --user daemon-reload
    systemctl --user enable syncthing-monitor.service
    systemctl --user start syncthing-monitor.service

    print $"✅ Systemd service installed: ($service_target)"
}

def uninstall_monitor [] {
    let platform = detect_platform

    print "🗑️  Uninstalling Syncthing connection monitor..."

    match $platform {
        "macos" => { uninstall_macos }
        "linux" => { uninstall_linux }
        _ => {
            print $"❌ Unsupported platform: ($platform)"
            exit 1
        }
    }

    print "✅ Syncthing monitor uninstalled successfully!"
}

def uninstall_macos [] {
    let plist_target = $"($env.HOME)/Library/LaunchAgents/com.williamnapier.syncthing-monitor.plist"

    launchctl unload $plist_target 2>/dev/null
    rm -f $plist_target

    print "🍎 macOS LaunchAgent removed"
}

def uninstall_linux [] {
    systemctl --user stop syncthing-monitor.service 2>/dev/null
    systemctl --user disable syncthing-monitor.service 2>/dev/null
    rm -f $"($env.HOME)/.config/systemd/user/syncthing-monitor.service"
    systemctl --user daemon-reload

    print "🐧 Linux systemd service removed"
}

def show_status [] {
    let platform = detect_platform

    print "📊 Syncthing Monitor Status:"
    print "─" * 40

    match $platform {
        "macos" => {
            let status = (launchctl list | grep syncthing-monitor | complete)
            if $status.exit_code == 0 {
                print "✅ macOS LaunchAgent: Running"
                print $status.stdout
            } else {
                print "❌ macOS LaunchAgent: Not running"
            }
        }
        "linux" => {
            let status = (systemctl --user is-active syncthing-monitor.service | complete)
            if $status.stdout =~ "active" {
                print "✅ Linux systemd service: Running"
                systemctl --user status syncthing-monitor.service --no-pager
            } else {
                print "❌ Linux systemd service: Not running"
                print $"Status: ($status.stdout | str trim)"
            }
        }
    }

    # Check if log file exists
    let log_file = $"($env.HOME)/.local/share/syncthing-monitor.log"
    if ($log_file | path exists) {
        let log_size = (ls $log_file | get size.0)
        print $"📝 Log file: ($log_file) \(($log_size) bytes\)"
    } else {
        print "📝 Log file: Not created yet"
    }
}

def show_logs [] {
    let log_file = $"($env.HOME)/.local/share/syncthing-monitor.log"

    if ($log_file | path exists) {
        print $"📝 Recent Syncthing monitor logs:"
        print "─" * 50
        tail -20 $log_file
    } else {
        print "📝 No log file found yet"
        print "🔍 Monitor may not have started or logged anything"
    }
}

def detect_platform [] {
    let os_info = (uname)
    let kernel = $os_info.kernel-name
    match $kernel {
        "Darwin" => "macos"
        "Linux" => "linux"
        _ => "unknown"
    }
}

def show_usage [] {
    print "🔧 Syncthing Connection Monitor Setup"
    print ""
    print "Usage: setup-syncthing-monitor [command]"
    print ""
    print "Commands:"
    print "  install     Install and start the connection monitor"
    print "  uninstall   Remove the connection monitor"
    print "  status      Show current monitor status"
    print "  logs        Show recent monitor logs"
    print ""
    print "The monitor automatically:"
    print "  • Checks Syncthing connections every 5 minutes"
    print "  • Restarts Syncthing when devices disconnect"
    print "  • Logs all activity for troubleshooting"
    print "  • Starts automatically on system boot"
}