#!/usr/bin/env nu

# Cross-Platform Dotter Protection Verification System

def main [] {
    print "üîç Cross-Platform Dotter Protection Verification"
    print "================================================="
    
    let os = (sys host | get name)
    let dotfiles_root = detect_dotfiles_root
    
    print $"üñ•Ô∏è  Platform: ($os)"
    print $"üìÅ Dotfiles: ($dotfiles_root)"
    
    # Get platform-appropriate managed files
    let managed_files = get_managed_files_for_platform
    
    print $"\nüìä PROTECTION STATUS BY FILE"
    print $"============================="
    
    mut protected_count = 0
    mut total_count = 0
    
    for file in $managed_files {
        let source_path = $"($dotfiles_root)/($file.path)"
        
        if ($source_path | path exists) {
            $total_count = $total_count + 1
            
            # Check if file has warning comment
            let content = (open $source_path --raw | decode utf-8)
            let has_warning = ($content | str contains "CLAUDE CODE: THIS FILE IS DOTTER-MANAGED")
            
            if $has_warning {
                print $"‚úÖ ($file.path) - Protected"
                $protected_count = $protected_count + 1
            } else {
                print $"‚ùå ($file.path) - NOT PROTECTED"
            }
        } else {
            print $"‚ùì ($file.path) - Source file not found"
        }
    }
    
    print $"\nüìà SUMMARY"
    print $"Protected files: ($protected_count)/($total_count)"
    
    if $protected_count < $total_count {
        let unprotected = $total_count - $protected_count
        print $"‚ùå ($unprotected) files still need protection!"
        print "\nRun: dotter-protect-all-cross-platform"
        exit 1
    } else {
        print "‚úÖ ALL PLATFORM-APPROPRIATE FILES ARE PROTECTED!"
        exit 0
    }
}

def detect_dotfiles_root [] {
    # Try to detect dotfiles root - works on both platforms
    if ($env.PWD | str ends-with "dotfiles") {
        $env.PWD
    } else if (($env.HOME + "/dotfiles") | path exists) {
        $env.HOME + "/dotfiles" 
    } else if (($env.HOME + "/.dotfiles") | path exists) {
        $env.HOME + "/.dotfiles"
    } else {
        print "‚ùå Could not locate dotfiles directory"
        exit 1
    }
}

def get_managed_files_for_platform [] {
    let os = (sys host | get name)
    
    # Shared files (work on all platforms)
    mut files = [
        {path: "helix/config.toml", comment: "#"},
        {path: "nushell/config.nu", comment: "#"},
        {path: "nushell/env.nu", comment: "#"},
        {path: "yazi/yazi.toml", comment: "#"},
        {path: "yazi/keymap.toml", comment: "#"},
        {path: "yazi/theme.toml", comment: "#"},
        {path: "zellij/config.kdl", comment: "//"},
        {path: "starship.toml", comment: "#"},
        {path: "git/gitconfig", comment: "#"},
        {path: "nvim/init.lua", comment: "--"}
    ]
    
    # Platform-specific files
    if ($os | str contains "Darwin") {
        # macOS specific
        $files = ($files | append [
            {path: "shell/zshrc", comment: "#"},
            {path: "wezterm/wezterm.lua", comment: "--"},
            {path: "ghostty/config", comment: "#"}
        ])
    } else {
        # Linux specific
        $files = ($files | append [
            {path: "shell/bashrc", comment: "#"}
        ])
    }
    
    $files
}

main