#!/usr/bin/env nu

# Emergency Fix for Date Corruption
# Fixes dates corrupted from "2025-09-12" to "44min 2025-2109-12"
# The bug interpreted MM as HHMM time and calculated duration
# Created: 2025-09-12 EMERGENCY

def main [--dry-run, --verbose] {
    let vault_path = $"($env.HOME)/Obsidian.nosync/Forge"
    
    print "üö® EMERGENCY DATE CORRUPTION FIX"
    print "================================"
    print $"Vault: ($vault_path)"
    print ""
    
    # Find all corrupted patterns in all markdown files
    print "Scanning for corrupted dates..."
    
    let corrupted_files = (
        rg --files-with-matches "\\d+(?:hr|min)\\s+20\\d{2}-\\d{4}-\\d{2}" $vault_path --type md
        | lines
    )
    
    let total_files = ($corrupted_files | length)
    
    if $total_files == 0 {
        print "‚úÖ No corrupted dates found!"
        return
    }
    
    print $"‚ùå Found corrupted dates in ($total_files) files"
    print ""
    
    mut total_fixes = 0
    
    for file in $corrupted_files {
        let content = (open $file --raw)
        let lines = ($content | lines)
        
        mut fixed_lines = []
        mut file_fix_count = 0
        
        for line in $lines {
            # Pattern: "XXmin YYYY-MMDD-DD" or "XXhr XXmin YYYY-MMDD-DD"
            # Where MMDD is the corrupted month (e.g., 2109 for September 09)
            let fixed_line = (
                $line
                # Fix pattern: "duration YYYY-MMDD-DD" -> "YYYY-MM-DD"
                | str replace --regex '(\d+(?:hr\s+)?(?:\d+min\s+)?)(20\d{2})-(\d{2})(\d{2})-(\d{2})' '$2-$3-$5'
                # Also handle if it's at start of line (like in headers)
                | str replace --regex '^#\s+(\d+(?:hr\s+)?(?:\d+min\s+)?)(20\d{2})-(\d{2})(\d{2})-(\d{2})' '# $2-$3-$5'
            )
            
            if $fixed_line != $line {
                $file_fix_count = $file_fix_count + 1
                if $verbose {
                    print $"  Fixed: ($line)"
                    print $"     To: ($fixed_line)"
                }
            }
            
            $fixed_lines = ($fixed_lines | append $fixed_line)
        }
        
        if $file_fix_count > 0 {
            let relative_path = ($file | str replace $vault_path "")
            print $"üìù ($relative_path): ($file_fix_count) dates fixed"
            $total_fixes = $total_fixes + $file_fix_count
            
            if not $dry_run {
                # Write the fixed content back
                ($fixed_lines | str join "\n") | save --force $file
            }
        }
    }
    
    print ""
    print "================================"
    if $dry_run {
        print $"üîç DRY RUN: Would fix ($total_fixes) dates in ($total_files) files"
        print "Run without --dry-run to apply fixes"
    } else {
        print $"‚úÖ FIXED ($total_fixes) dates in ($total_files) files!"
    }
}