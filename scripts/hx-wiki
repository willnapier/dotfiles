#!/bin/bash

# Wiki link handler for Helix
# Extracts the FIRST wiki link from the current line and opens it
# For multi-link lines, use 'wn' command in terminal for interactive selection
#
# Usage: Called by Space+w in Helix (see helix/config.toml)

# Cross-platform file opener
open_file() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        open "$@"
    else
        xdg-open "$@" 2>/dev/null &
    fi
}

line=$(cat)

# Debug: log what we received
echo "DEBUG: Received input: $line" >> /tmp/hx-wiki-debug.log

# Clear any old temp file first
rm -f /tmp/helix-current-link.md
target_file="/tmp/helix-current-link.md"

# Extract first wiki link from the line (using ripgrep)
# Note: Helix doesn't expose cursor position, so we always take the first link
first_link=$(echo "$line" | rg -o '!?\[\[[^]]+\]\]' 2>/dev/null | head -1)

# If no link found, exit
if [ -z "$first_link" ]; then
    exit 0
fi

# Extract just the link content from [[link]]
link=$(echo "$first_link" | sd '!*\[\[(.*)\]\]' '$1')

if [ -z "$link" ]; then
    # No wiki link found - do nothing
    exit 0
fi

# Clean the link
clean_link=$(echo "$link" | sd '[#|].*' '')

vault="$HOME/Forge"
admin_dir="$HOME/Admin"
daily_dir="$vault/NapierianLogs/DayPages"

# First, search for existing file in both Forge and Admin - exact match
existing_file=$(fd -t f "^$clean_link\.md$" "$vault" "$admin_dir" 2>/dev/null | head -1)
if [ -n "$existing_file" ]; then
    # Found exact match - create symlink for Helix
    ln -sf "$existing_file" "$target_file"
    exit 0
fi

# If no exact match, search for files containing the link text (for partial matches like dates)
if [[ "$clean_link" =~ Journal.*[0-9]{4}-[0-9]{2}-[0-9]{2} ]]; then
    # Extract date from journal links
    date_part=$(echo "$clean_link" | rg -o '[0-9]{4}-[0-9]{2}-[0-9]{2}')
    if [ -n "$date_part" ]; then
        existing_file=$(fd -t f "$date_part.*\.md$" "$vault" "$admin_dir" 2>/dev/null | head -1)
        if [ -n "$existing_file" ]; then
            # Found existing journal entry with matching date
            ln -sf "$existing_file" "$target_file"
            exit 0
        fi
    fi
fi

# Check current file context - if we have a symlink, resolve it
current_file=""
if [ -L "/tmp/helix-current-link.md" ]; then
    current_file=$(readlink "/tmp/helix-current-link.md")
fi

# Determine where to create the new file
if [[ "$current_file" == *"/DayPages/"* ]]; then
    # We're in a DayPages file
    if [[ "$clean_link" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
        # Date format - create in DayPages
        file="$daily_dir/$clean_link.md"
    else
        # Regular note - create in fleeting notes inbox
        fleeting_dir="$vault/fleeting"
        mkdir -p "$fleeting_dir"
        if [[ "$clean_link" != *.md ]]; then
            file="$fleeting_dir/$clean_link.md"
        else
            file="$fleeting_dir/$clean_link"
        fi
    fi
elif [[ "$clean_link" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    # Daily note format (YYYY-MM-DD) - use DayPages path
    file="$daily_dir/$clean_link.md"
else
    # Regular note - build normal path
    # Check if file already has an extension
    if [[ "$clean_link" == *.* ]]; then
        # Has extension - use as-is
        file="$vault/$clean_link"
    elif [[ "$clean_link" != *.md ]]; then
        # No extension - assume markdown
        file="$vault/$clean_link.md"
    else
        file="$vault/$clean_link"
    fi
fi

if [ -f "$file" ]; then
    # File exists - check type and handle accordingly
    extension="${file##*.}"
    case "$extension" in
        md|txt|text)
            # Text files - create symlink for Helix
            ln -sf "$file" "$target_file"
            ;;
        pdf|PDF)
            # PDFs - open in system viewer, no temp file needed
            open_file "$file"
            exit 0
            ;;
        png|jpg|jpeg|gif|PNG|JPG|JPEG|GIF)
            # Images - open in system viewer, no temp file needed
            open_file "$file"
            exit 0
            ;;
        *)
            # Other files - try to open with system default, no temp file needed
            open_file "$file"
            exit 0
            ;;
    esac
elif [[ "$clean_link" =~ ^[0-9]{4}-[0-9]{2}-[0-9]{2}$ ]]; then
    # Daily note format (YYYY-MM-DD) - create it
    daily_dir="$vault/NapierianLogs/DayPages"
    mkdir -p "$daily_dir"
    
    # Create the daily note using the template
    current_date="$clean_link"
    current_time=$(date "+%H:%M")
    readable_date=$(date -j -f "%Y-%m-%d" "$clean_link" "+%A, %B %d, %Y" 2>/dev/null || echo "$clean_link")
    
    # Calculate previous and next dates using Python
    prev_date=$(python3 -c "from datetime import datetime, timedelta; d=datetime.strptime('$clean_link', '%Y-%m-%d') - timedelta(days=1); print(d.strftime('%Y-%m-%d'))" 2>/dev/null || echo "")
    next_date=$(python3 -c "from datetime import datetime, timedelta; d=datetime.strptime('$clean_link', '%Y-%m-%d') + timedelta(days=1); print(d.strftime('%Y-%m-%d'))" 2>/dev/null || echo "")
    
    cat > "$file" << EOF
---
tags:
- journal
date created: $current_date $current_time
date modified: $current_date $current_time

# Daily Metrics
sleep_hours: 
healthy_eating: false
exercise: false
piano_practice: false
meditation: false
reading: false
social_connection: false

# exercise_details: "[[Exercise Log $current_date]]"
# piano_details: "[[Piano Practice Log $current_date]]"
# health_details: "[[Health Metrics $current_date]]"
---
# $readable_date

## Tasks
- [ ] 

## Notes

## Journal

## Links
- Previous: [[$prev_date]]
- Next: [[$next_date]]

## Backlinks

EOF

    # Create symlink for Helix
    ln -sf "$file" "$target_file"
else
    # File doesn't exist - check if it's a media file
    extension="${file##*.}"
    case "$extension" in
        jpg|jpeg|png|gif|bmp|webp|svg|pdf|mp4|mov|avi|mp3|wav|m4a|JPG|JPEG|PNG|GIF|PDF)
            # Media file that doesn't exist - show error in Helix
            error_file="/tmp/helix-current-link.md"
            cat > "$error_file" << EOF
# File Not Found

The linked media file does not exist:

**Path**: $file
**Link**: [[$clean_link]]

This could mean:
- The file was moved or deleted
- The filename is misspelled in the wiki link
- The media hasn't been imported yet

## Search for similar files

\`\`\`bash
# Search for files with similar names
fd -i "$(basename "$file" .$extension)" ~/Forge/linked_media/
\`\`\`
EOF
            exit 0
            ;;
        *)
            # Regular note that doesn't exist - create it like Obsidian does
            current_date=$(date "+%Y-%m-%d")
            current_time=$(date "+%H:%M")

            # Ensure directory exists
            note_dir=$(dirname "$file")
            mkdir -p "$note_dir"

            # Create the note with basic frontmatter and H2 backlinks section
            cat > "$file" << EOF
---
tags:
-
date created: $current_date $current_time
date modified: $current_date $current_time
---
# $clean_link



## Backlinks

EOF
    
    # Create symlink for Helix
    ln -sf "$file" "$target_file"

    # Trigger immediate backlink population for the new file
    # Run in background to avoid blocking the editor
    (cd ~/scripts/obsidian-link-manager && \
     source venv/bin/activate && \
     python3 -c "
import sys
sys.path.insert(0, '.')
from pathlib import Path
from backlinks_collections import BacklinksManager, BacklinksConfig, load_backlinks_collections_config
from link_manager import ColorLogger

vault_path = Path('$vault')
file_path = Path('$file')
logger = ColorLogger()
config = BacklinksConfig()
manager = BacklinksManager(vault_path, config, logger)

# Update backlinks for the newly created file
manager.update_backlinks_section(file_path)

# Also update backlinks for files that link to this new file
for other_file in vault_path.rglob('*.md'):
    if other_file != file_path:
        try:
            content = other_file.read_text(encoding='utf-8')
            if '[[${clean_link}]]' in content or '?[[${clean_link}]]' in content:
                manager.update_backlinks_section(other_file)
        except:
            pass
" 2>/dev/null &)
            ;;
    esac
fi