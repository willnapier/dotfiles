#!/bin/bash

# Dotfiles Integrity Verification Script
# Checks that all configs are properly symlinked to dotfiles repo

set -e

DOTFILES_DIR="/Users/williamnapier/dotfiles"
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo "🔍 Verifying dotfiles integrity..."
echo ""

# Function to check if a file is properly symlinked
check_symlink() {
    local target="$1"
    local expected_source="$2"
    local name="$3"
    
    if [[ ! -e "$target" ]]; then
        echo -e "${RED}❌ MISSING: $name${NC}"
        echo "   Target: $target (does not exist)"
        return 1
    fi
    
    if [[ -L "$target" ]]; then
        local actual_source=$(readlink "$target")
        if [[ "$actual_source" == "$expected_source" ]]; then
            echo -e "${GREEN}✅ OK: $name${NC}"
            return 0
        else
            echo -e "${RED}❌ WRONG SYMLINK: $name${NC}"
            echo "   Target: $target"
            echo "   Expected: $expected_source"
            echo "   Actual: $actual_source"
            return 1
        fi
    else
        echo -e "${RED}❌ NOT SYMLINKED: $name${NC}"
        echo "   Target: $target (is a regular file, should be symlink)"
        echo "   Expected: -> $expected_source"
        return 1
    fi
}

echo "Checking configuration files:"
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Track failures
failed=0

# Check each config file from Dotter global.toml
check_symlink "/Users/williamnapier/.config/helix/config.toml" "/Users/williamnapier/dotfiles/helix/config.toml" "Helix config" || ((failed++))

check_symlink "/Users/williamnapier/.config/nushell/config.nu" "/Users/williamnapier/dotfiles/nushell/config.nu" "Nushell config" || ((failed++))

check_symlink "/Users/williamnapier/.config/nushell/env.nu" "/Users/williamnapier/dotfiles/nushell/env.nu" "Nushell env" || ((failed++))

check_symlink "/Users/williamnapier/.config/yazi/yazi.toml" "/Users/williamnapier/dotfiles/yazi/yazi.toml" "Yazi config" || ((failed++))

check_symlink "/Users/williamnapier/.config/yazi/keymap.toml" "/Users/williamnapier/dotfiles/yazi/keymap.toml" "Yazi keymap" || ((failed++))

check_symlink "/Users/williamnapier/.config/zellij/config.kdl" "/Users/williamnapier/dotfiles/zellij/config.kdl" "Zellij config" || ((failed++))

# Check symbolic directory links
if [[ -L "/Users/williamnapier/.config/nvim" ]]; then
    actual_nvim=$(readlink "/Users/williamnapier/.config/nvim")
    if [[ "$actual_nvim" == "/Users/williamnapier/dotfiles/nvim" ]]; then
        echo -e "${GREEN}✅ OK: Neovim config directory${NC}"
    else
        echo -e "${RED}❌ WRONG SYMLINK: Neovim config directory${NC}"
        echo "   Expected: /Users/williamnapier/dotfiles/nvim"
        echo "   Actual: $actual_nvim"
        ((failed++))
    fi
else
    echo -e "${RED}❌ NOT SYMLINKED: Neovim config directory${NC}"
    ((failed++))
fi

if [[ -L "/Users/williamnapier/.local/bin" ]]; then
    actual_bin=$(readlink "/Users/williamnapier/.local/bin")
    if [[ "$actual_bin" == "/Users/williamnapier/dotfiles/scripts" ]]; then
        echo -e "${GREEN}✅ OK: Scripts directory${NC}"
    else
        echo -e "${RED}❌ WRONG SYMLINK: Scripts directory${NC}"
        echo "   Expected: /Users/williamnapier/dotfiles/scripts"
        echo "   Actual: $actual_bin"
        ((failed++))
    fi
else
    echo -e "${RED}❌ NOT SYMLINKED: Scripts directory${NC}"
    ((failed++))
fi

echo ""
echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"

# Summary
if [[ $failed -eq 0 ]]; then
    echo -e "${GREEN}🎉 ALL CHECKS PASSED: Dotfiles integrity verified!${NC}"
    exit 0
else
    echo -e "${RED}⚠️  DRIFT DETECTED: $failed configuration(s) not properly linked${NC}"
    echo ""
    echo "To fix drift issues, run:"
    echo "  dotter deploy --force"
    exit 1
fi