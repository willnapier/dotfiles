#!/usr/bin/env nu

# Claude Documentation Real-Time Sync - Re-nu Native Version
# Watches ~/Claude directory and auto-commits + pushes on file changes
# Re-nu conversion: No fswatch dependency, pure Nushell structured data processing

def main [] {
    let claude_dir = $"($env.HOME)/Claude"
    let log_file = "/tmp/claude-docs-watcher.log"
    let lockfile = "/tmp/claude-docs-watcher.lock"
    
    # Ensure log file exists
    touch $log_file
    
    # Check for existing instance
    if ($lockfile | path exists) {
        let existing_content = (try { open $lockfile | str trim } catch { "" })
        if $existing_content != "" {
            log_message $log_file $"Claude docs watcher already running: ($existing_content)"
            return
        }
        log_message $log_file "Removing stale lock file"
        rm $lockfile
    }
    
    # Create lock file with timestamp
    (date now | format date "%s") | save $lockfile
    
    # Validation checks
    if not ($claude_dir | path exists) {
        log_message $log_file $"ERROR: Claude directory not found at ($claude_dir)"
        cleanup $lockfile $log_file
        return
    }
    
    let git_dir = $"($claude_dir)/.git"
    if not ($git_dir | path exists) {
        log_message $log_file $"ERROR: ($claude_dir) is not a git repository"
        cleanup $lockfile $log_file
        return
    }
    
    log_message $log_file $"üöÄ Starting Claude docs watcher (Re-nu native) for ($claude_dir)"
    log_message $log_file "üìù Monitoring .md files for auto-commit and push"
    log_message $log_file "‚ö° Using native Nushell watch - no fswatch dependency"
    
    # The Re-nu magic: Native Nushell watch with structured data
    try {
        watch $claude_dir --glob "**/*.md" --debounce-ms 1000 --recursive true {|operation, path, new_path|
            handle_docs_change $operation $path $new_path $claude_dir $log_file
        }
    } catch {|error|
        log_message $log_file $"‚ùå Watch failed: ($error.msg)"
        cleanup $lockfile $log_file
    }
}

# Logging function
def log_message [log_file: string, message: string] {
    let timestamp = (date now | format date "%Y-%m-%d %H:%M:%S")
    let log_entry = $"($timestamp) - ($message)"
    print $log_entry
    $log_entry | save --append $log_file
}

# Cleanup function
def cleanup [lockfile: string, log_file: string] {
    if ($lockfile | path exists) {
        rm $lockfile
    }
    log_message $log_file "Claude docs watcher stopped"
}

# Handle documentation file changes with native structured data
def handle_docs_change [operation: string, file_path: string, new_path: string, claude_dir: string, log_file: string] {
    # Only process actual file modifications to markdown files
    if ($operation == "Modify") and (($file_path | path parse).extension == "md") {
        log_message $log_file $"üìù Detected change in: ($file_path)"
        
        # Small delay to ensure file write is complete
        sleep 500ms
        
        # Change to Claude directory for git operations
        cd $claude_dir
        
        # Check if there are actually any changes using git
        let git_status = (do { git status --porcelain } | complete)
        if $git_status.exit_code != 0 {
            log_message $log_file "‚ùå Failed to check git status"
            return
        }
        
        if ($git_status.stdout | str trim | is-empty) {
            log_message $log_file "‚ÑπÔ∏è  No actual changes detected after checking - skipping"
            return
        }
        
        # Add all changes
        let git_add = (do { git add . } | complete)
        if $git_add.exit_code != 0 {
            log_message $log_file $"‚ùå Failed to add changes: ($git_add.stderr)"
            return
        }
        
        # Create commit with file-specific message
        let filename = ($file_path | path basename)
        let timestamp = (date now | format date "%Y-%m-%d %H:%M:%S")
        let commit_msg = $"Auto-sync: Updated ($filename)

($timestamp)

ü§ñ Generated with [Claude Code](https://claude.ai/code)

Co-Authored-By: Claude <noreply@anthropic.com>"
        
        # Commit changes
        let git_commit = (do { git commit -m $commit_msg } | complete)
        if $git_commit.exit_code == 0 {
            log_message $log_file $"‚úÖ Committed changes for ($filename)"
            
            # Push to remote
            let git_push = (do { git push origin main } | complete)
            if $git_push.exit_code == 0 {
                log_message $log_file $"üöÄ Successfully pushed ($filename) to GitHub"
            } else {
                log_message $log_file $"‚ö†Ô∏è  WARNING: Failed to push to GitHub - ($git_push.stderr)"
            }
        } else {
            if ($git_commit.stderr | str contains "nothing to commit") {
                log_message $log_file $"‚ÑπÔ∏è  No changes to commit for ($filename)"
            } else {
                log_message $log_file $"‚ùå Failed to commit: ($git_commit.stderr)"
            }
        }
    } else {
        # Log other events but don't process them
        let filename = ($file_path | path basename)
        log_message $log_file $"üëÅÔ∏è  Detected ($operation) on ($filename) (skipped)"
    }
}