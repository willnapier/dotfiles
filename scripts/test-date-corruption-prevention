#!/usr/bin/env nu

# Date Corruption Prevention Test Suite
# Tests the activity-duration-processor against known problematic patterns
# Created to prevent regression of the "Dreaded Date Corruption" bug

def main [] {
    print "🔍 Testing Activity Duration Processor - Date Corruption Prevention"
    print "=" * 70

    # Create comprehensive test file
    let test_file = "/tmp/date-corruption-test.md"

    let test_content = [
        "# 2025-09-17 - Daily Log",
        "",
        "## Activities",
        "w:: work 0900-1030",
        "t:: meeting 1430-45",
        "",
        "## Edge Cases That Previously Failed:",
        "Meeting on 2025-09-17 from 1100-30.",
        "Project 2024-12-25 deadline 1400-1500.",
        "# 2023-01-01 Header",
        "## 2024-11-15 Subheader",
        "### 2025-12-31 Events",
        "",
        "## Valid time processing:",
        "s:: break 1030-45",
        "p:: planning 1600-1630",
        "",
        "## Mixed scenarios:",
        "Called on 2025-09-17 about 0800-0830 call.",
        "Event 2024-06-10: Duration 1200-1300.",
        "",
        "Normal time ranges should work: 1415-30"
    ] | str join "\n"

    # Write test file
    $test_content | save --force $test_file

    print $"📝 Created test file: ($test_file)"
    print "📋 Test content includes:"
    print "   • H1 headers with dates (# 2025-09-17)"
    print "   • H2/H3 headers with dates (## 2024-12-25)"
    print "   • Inline dates with times (2025-09-17 from 1100-30)"
    print "   • Valid time ranges (0900-1030, 1430-45)"
    print "   • Edge cases that previously caused corruption"
    print ""

    # Show before content
    print "📄 BEFORE processing:"
    print "-" * 40
    open $test_file | lines | enumerate | each { |item| $"($item.index + 1): ($item.item)" } | to text
    print ""

    # Run processor
    print "⚙️  Running activity-duration-processor..."
    try {
        ^activity-duration-processor $test_file
        print "✅ Processor completed successfully"
    } catch { |err|
        print $"❌ Processor failed: ($err.msg)"
        return
    }

    print ""
    print "📄 AFTER processing:"
    print "-" * 40

    # Check results
    let processed_content = (open $test_file)
    let lines = ($processed_content | lines)

    # Validation checks
    mut failed_checks = []

    print "🔍 Validation Results:"
    print "-" * 30

    # Check 1: Headers with dates should be unchanged
    let header_safe = ($lines | any { |line| $line =~ '^# 2025-09-17' })
    if $header_safe {
        print "✅ H1 headers with dates preserved"
    } else {
        print "❌ H1 headers with dates corrupted!"
        $failed_checks = ($failed_checks | append "H1 header corruption")
    }

    # Check 2: Inline dates should be preserved
    let inline_dates_safe = ($lines | any { |line| $line =~ '2025-09-17' and not ($line =~ '2025-\d{4}-17') })
    if $inline_dates_safe {
        print "✅ Inline dates preserved"
    } else {
        print "❌ Inline dates corrupted!"
        $failed_checks = ($failed_checks | append "Inline date corruption")
    }

    # Check 3: Valid time processing should work
    let time_processing_works = ($lines | any { |line| $line =~ '\d+min \d{4}-\d{4}' })
    if $time_processing_works {
        print "✅ Time processing still functional"
    } else {
        print "❌ Time processing broken!"
        $failed_checks = ($failed_checks | append "Time processing failure")
    }

    # Check 4: No corrupted date patterns (like 2025-2109-17)
    let no_corruption = not ($lines | any { |line| $line =~ '\d{4}-\d{4}-\d{2}' })
    if $no_corruption {
        print "✅ No date corruption detected"
    } else {
        print "❌ Date corruption detected!"
        let corrupted_lines = ($lines | enumerate | where { |item| $item.item =~ '\d{4}-\d{4}-\d{2}' })
        for line in $corrupted_lines {
            print $"   Line ($line.index + 1): ($line.item)"
        }
        $failed_checks = ($failed_checks | append "Date corruption present")
    }

    print ""

    # Final result
    if ($failed_checks | length) == 0 {
        print "🎉 ALL TESTS PASSED! Date corruption prevention is working."
        print "🛡️  The Dreaded Date Corruption has been defeated!"
    } else {
        print "💥 TESTS FAILED! Issues detected:"
        for check in $failed_checks {
            print $"   • ($check)"
        }
        print ""
        print "🚨 CRITICAL: The date corruption bug has returned!"
        print "🔧 ACTION REQUIRED: Fix the activity-duration-processor immediately"
    }

    print ""
    print "📄 Full processed content:"
    print "=" * 50
    $lines | enumerate | each { |item| $"($item.index + 1): ($item.item)" } | to text
}