#!/usr/bin/env nu

# Dotter Sync Watcher - Auto-deploy when dotfiles change
# Watches ~/dotfiles for Syncthing updates and runs dotter deploy

# Auto-manage services after deployment with safety checks
def auto_manage_services [timestamp: string, log_file: path] {
    let os_name = (sys host | get name)

    if $os_name == "Linux" {
        # Check for new systemd service files
        let service_files = (try { ls ~/.config/systemd/user/*.service } | default [])
        let managed_services = ["wiki-link-manager", "syncthing-monitor", "git-auto-push-watcher"]

        for service in $managed_services {
            let service_file = $"~/.config/systemd/user/($service).service"

            if ($service_file | path exists) {
                # Check if service is already enabled to avoid unnecessary operations
                let is_enabled = (do { systemctl --user is-enabled $"($service).service" } | complete | get exit_code) == 0
                let is_active = (do { systemctl --user is-active $"($service).service" } | complete | get exit_code) == 0

                if not $is_enabled {
                    let enable_msg = $"[($timestamp)] 🔧 Auto-enabling systemd service: ($service)"
                    $enable_msg | save --append $log_file
                    print $"🔧 Auto-enabling service: ($service)"

                    systemctl --user daemon-reload
                    systemctl --user enable $"($service).service"

                    if not $is_active {
                        systemctl --user start $"($service).service"
                        let start_msg = $"[($timestamp)] 🚀 Auto-started service: ($service)"
                        $start_msg | save --append $log_file
                        print $"🚀 Started service: ($service)"
                    }
                } else if not $is_active {
                    # Service is enabled but not running - restart it
                    systemctl --user restart $"($service).service"
                    let restart_msg = $"[($timestamp)] 🔄 Auto-restarted service: ($service)"
                    $restart_msg | save --append $log_file
                    print $"🔄 Restarted service: ($service)"
                }
            }
        }
    } else if $os_name == "Darwin" {
        # Check for new LaunchAgent plist files
        let plist_dir = $"($env.HOME)/Library/LaunchAgents"
        let managed_agents = ["com.williamnapier.wiki-link-manager", "com.williamnapier.syncthing-monitor", "com.williamnapier.git-auto-pull-watcher"]

        for agent in $managed_agents {
            let plist_file = $"($plist_dir)/($agent).plist"

            if ($plist_file | path exists) {
                # Check if LaunchAgent is loaded
                let is_loaded = (do { launchctl list | rg $agent } | complete | get exit_code) == 0

                if not $is_loaded {
                    let load_msg = $"[($timestamp)] 🔧 Auto-loading LaunchAgent: ($agent)"
                    $load_msg | save --append $log_file
                    print $"🔧 Auto-loading agent: ($agent)"

                    launchctl load $plist_file
                } else {
                    # Agent is loaded but may need restart - unload and reload
                    launchctl unload $plist_file
                    launchctl load $plist_file
                    let reload_msg = $"[($timestamp)] 🔄 Auto-reloaded LaunchAgent: ($agent)"
                    $reload_msg | save --append $log_file
                    print $"🔄 Reloaded agent: ($agent)"
                }
            }
        }
    }
}

def main [] {
    let dotfiles_dir = $"($env.HOME)/dotfiles"
    let log_file = $"($env.HOME)/.local/share/dotter-sync-watcher.log"
    let lock_file = "/tmp/dotter-sync-watcher.lock"
    let last_deploy = "/tmp/dotter-last-deploy"

    # Ensure log directory exists
    mkdir ($log_file | path dirname)

    # Smart lock file handling with stale lock detection
    if ($lock_file | path exists) {
        let lock_age = ((date now) - (ls $lock_file | get 0.modified))
        let age_minutes = ($lock_age / 1min)

        if $age_minutes > 10 {
            let timestamp = (date now | format date "%H:%M:%S")
            let age_rounded = ($age_minutes | math round)
            let cleanup_msg = $"[($timestamp)] 🧹 Cleaning up stale lock file ($age_rounded) minutes old"
            $cleanup_msg | save --append $log_file
            print $cleanup_msg
            rm -f $lock_file
        } else {
            print "❌ Sync watcher already running (recent lock file)"
            exit 1
        }
    }

    # Create lock file
    "running" | save $lock_file

    print "🚀 Starting Dotter sync watcher"
    print $"👀 Watching: ($dotfiles_dir)"
    print $"📝 Logging to: ($log_file)"

    # Initial deploy timestamp
    (date now | format date "%s") | save --force $last_deploy

    # Use infinite loop with file change detection
    # (Nushell doesn't have built-in file watching yet)
    print "⚠️  Note: Using polling method (Nushell watch not yet available)"

    mut last_check = (try { ls $"($dotfiles_dir)/**/*.{toml,kdl,nu,sh,lua}" | get modified | math max } | default (date now))

    loop {
        sleep 2sec

        # Check for changes
        let current_files = (try { ls $"($dotfiles_dir)/**/*.{toml,kdl,nu,sh,lua}" } | default [])
        if ($current_files | is-empty) { continue }

        let latest_change = ($current_files | get modified | math max)

        if $latest_change > $last_check {
            let now = (date now | format date "%s" | into int)
            let last = (try { open $last_deploy | into int } catch { 0 })
            let elapsed = $now - $last

            # Debounce - only deploy once every 5 seconds
            if $elapsed > 5 {
                let timestamp = (date now | format date "%H:%M:%S")
                let message = $"[($timestamp)] Change detected in dotfiles"
                $message | save --append $log_file
                print $message

                # Run dotter deploy
                print "🔄 Running dotter deploy..."
                cd $dotfiles_dir
                let result = (do { ~/.cargo/bin/dotter deploy } | complete)

                if $result.exit_code == 0 {
                    let deploy_msg = $"[($timestamp)] ✅ Dotter deploy successful"
                    $deploy_msg | save --append $log_file
                    print "✅ Config updated!"

                    # Auto-manage services after successful deployment
                    auto_manage_services $timestamp $log_file
                } else {
                    let error_msg = $"[($timestamp)] ❌ Deploy failed: ($result.stderr)"
                    $error_msg | save --append $log_file
                    print $"❌ Deploy failed: ($result.stderr)"
                }

                # Update last deploy time
                (date now | format date "%s") | save --force $last_deploy
            }

            # Update last check time
            $last_check = $latest_change
        }
    }

    # Cleanup on exit
    rm -f $lock_file
    print "🛑 Sync watcher stopped"
}