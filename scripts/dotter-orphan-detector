#!/opt/homebrew/bin/nu

# Dotter Orphan Detector
# Finds files in dotfiles repo that aren't managed by Dotter configuration
# Prevents the "desktop-quarters problem" from happening again

def main [] {
    print "🔍 Scanning for orphaned files in dotfiles repository..."
    
    # Get all files in dotfiles (excluding git/hidden files)
    let all_files = (
        fd --type f --exclude ".git" --exclude ".DS_Store" --exclude "*.md" 
           --exclude "CLAUDE.md" --exclude ".dotter" . ~/dotfiles
        | str replace ([$env.HOME "/dotfiles/"] | path join) ""
        | lines
        | sort
    )
    
    # Get files managed by Dotter
    let dotter_config = (open ~/dotfiles/.dotter/global.toml)
    
    # Extract all file paths from [shared.files], [macos.files], [linux.files]
    let managed_files = (
        [
            ($dotter_config.shared?.files? | default {} | columns),
            ($dotter_config.macos?.files? | default {} | columns),
            ($dotter_config.linux?.files? | default {} | columns)
        ]
        | flatten
        | uniq
        | sort
    )
    
    print $"📋 Found ($all_files | length) files in dotfiles"
    print $"🔗 Found ($managed_files | length) files managed by Dotter"
    
    # Find orphans - files in dotfiles but not in Dotter config
    let orphans = (
        $all_files 
        | where { |file| $file not-in $managed_files }
        | where { |file| 
            # Filter out documentation, README, etc.
            if ($file | str contains "README") { false }
            else if ($file | str contains ".md") { false }
            else if ($file | str starts-with "docs/") { false }
            else if ($file | str starts-with ".dotter/") { false }
            else { true }
        }
    )
    
    if ($orphans | is-empty) {
        print "✅ No orphaned files found - all configuration files are managed by Dotter!"
        return
    }
    
    print $"⚠️  Found ($orphans | length) orphaned files:"
    print ""
    
    for $file in $orphans {
        let full_path = ([$env.HOME, "dotfiles", $file] | path join)
        
        # Determine likely Dotter section
        let suggested_section = match $file {
            $f if ($f | str starts-with "zellij/") => "shared.files",
            $f if ($f | str starts-with "helix/") => "shared.files", 
            $f if ($f | str starts-with "yazi/") => "shared.files",
            $f if ($f | str starts-with "nushell/") => "shared.files",
            $f if ($f | str starts-with "scripts/") => "shared.files",
            $f if ($f | str starts-with "wezterm/") => "macos.files",
            $f if ($f | str starts-with "ghostty/") => "macos.files",
            $f if ($f | str starts-with "karabiner/") => "macos.files",
            $f if ($f | str starts-with "wayland/") => "linux.files",
            _ => "shared.files"
        }
        
        # Determine target path
        let suggested_target = if ($file | str starts-with "scripts/") {
            $"~/.local/bin/($file | str replace 'scripts/' '')"
        } else {
            $"~/.config/($file)"
        }
        
        print $"❌ ($file)"
        print $"   Add to .dotter/global.toml \\[($suggested_section)]:"
        print $"   \"($file)\" = \"($suggested_target)\""
        print ""
    }
    
    print "🚨 CRITICAL: These files exist in your dotfiles but won't be deployed!"
    print "   They could disappear like desktop-quarters.kdl did."
    print ""
    print "🔧 Fix: Add the suggested lines to .dotter/global.toml then run 'dotter deploy'"
}