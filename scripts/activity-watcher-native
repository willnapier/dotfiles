#!/usr/bin/env nu

# Native Nushell Activity Duration Watcher
# Uses Nushell's built-in watch command - no external dependencies!
# This is the breakthrough solution using structured data principles

def main [] {
    print "🚀 Starting native Nushell activity duration watcher..."
    print "📝 Using Nushell's built-in watch command with structured data"
    print "⚡ No JSON parsing, no environment variables, just pure structured data!"
    print "🛑 Press Ctrl+C to stop\n"
    
    let vault_path = $"($env.HOME)/Obsidian.nosync/Forge"
    
    print $"📁 Watching: ($vault_path)"
    print "🎯 Filtering: **/*.md files only"  
    print "⏱️  Debounce: 2000ms for batch changes"
    print "🔄 Ready for file changes...\n"
    
    # The breakthrough: Use Nushell's native watch with structured closure parameters
    watch $vault_path --glob "**/*.md" --debounce-ms 2000 {|operation, path, new_path|
        let timestamp = (date now | format date "%H:%M:%S")
        let filename = ($path | path basename)
        
        print $"[($timestamp)] ($operation) detected: ($filename)"
        
        # Only process actual file modifications, not directory events
        if ($operation == "Modify") and (($path | path parse).extension == "md") {
            print $"  🔄 Processing activity durations in ($filename)..."
            
            # Call our activity processor with the exact file path
            let result = (do { ^activity-duration-processor $path } | complete)
            
            if $result.exit_code == 0 {
                print $"  ✅ Successfully processed ($filename)"
            } else {
                print $"  ❌ Error processing ($filename): ($result.stderr)"
            }
        } else {
            print $"  ℹ️  Skipping ($operation) event for ($filename)"
        }
        
        print ""  # Blank line for readability
    }
}