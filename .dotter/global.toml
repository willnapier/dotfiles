[helpers]

# Cross-platform shared configuration
[shared]
depends = []

[shared.files]
"git/gitconfig" = "~/.gitconfig"
"helix/config.toml" = "~/.config/helix/config.toml"
"nushell/config.nu" = "~/.config/nushell/config.nu"
"nushell/env.nu" = "~/.config/nushell/env.nu"
"yazi/yazi.toml" = "~/.config/yazi/yazi.toml"
"yazi/keymap.toml" = "~/.config/yazi/keymap.toml"
"yazi/theme.toml" = "~/.config/yazi/theme.toml"
"zellij/config.kdl" = "~/.config/zellij/config.kdl"
"starship.toml" = "~/.config/starship.toml"
# FIXED: Directory-level symlinks converted to individual files for reliability
# Yazi flavors - individual directory symlinks (flavors are complex nested structures)
"yazi/flavors/solarized-dark.yazi" = { target = "~/.config/yazi/flavors/solarized-dark.yazi", type = "symbolic" }
"yazi/flavors/solarized-light.yazi" = { target = "~/.config/yazi/flavors/solarized-light.yazi", type = "symbolic" }
"yazi/flavors/dracula.yazi" = { target = "~/.config/yazi/flavors/dracula.yazi", type = "symbolic" }
# Yazi plugins and scripts - individual directory symlinks
"yazi/plugins" = { target = "~/.config/yazi/plugins", type = "symbolic" }
"yazi/scripts" = { target = "~/.config/yazi/scripts", type = "symbolic" }
# Zellij layouts - individual files for reliability  
"zellij/layouts/laptop.kdl" = "~/.config/zellij/layouts/laptop.kdl"
"zellij/layouts/desktop.kdl" = "~/.config/zellij/layouts/desktop.kdl"
"zellij/layouts/desktop-27.kdl" = "~/.config/zellij/layouts/desktop-27.kdl"
"zellij/layouts/desktop-27-simple.kdl" = "~/.config/zellij/layouts/desktop-27-simple.kdl"
"zellij/layouts/desktop-quarters.kdl" = "~/.config/zellij/layouts/desktop-quarters.kdl"
"zellij/layouts/minimal-test.kdl" = "~/.config/zellij/layouts/minimal-test.kdl"
"zellij/layouts/test-basic.kdl" = "~/.config/zellij/layouts/test-basic.kdl"
# Helix themes - individual files for reliability (no more drift!)
"helix/themes/solarized_dark_modal.toml" = "~/.config/helix/themes/solarized_dark_modal.toml"
"helix/themes/solarized_light_modal.toml" = "~/.config/helix/themes/solarized_light_modal.toml" 
"helix/themes/solarized_dark_modal_wiki.toml" = "~/.config/helix/themes/solarized_dark_modal_wiki.toml"
"helix/themes/test_theme.toml" = "~/.config/helix/themes/test_theme.toml"
# Neovim configuration files
"nvim/init.lua" = "~/.config/nvim/init.lua"
"nvim/lazy-lock.json" = "~/.config/nvim/lazy-lock.json"
"nvim/lua" = { target = "~/.config/nvim/lua", type = "symbolic" }
"nvim/doc" = { target = "~/.config/nvim/doc", type = "symbolic" }
"nvim/spell" = { target = "~/.config/nvim/spell", type = "symbolic" }
# HIGH PRIORITY: Essential configurations (added 2025-09-16)
"aerospace/aerospace.toml" = "~/.config/aerospace/aerospace.toml"
"ghostty/themes/solarized-dark" = "~/.config/ghostty/themes/solarized-dark"
"ghostty/themes/solarized-light" = "~/.config/ghostty/themes/solarized-light"
"karabiner/karabiner.json" = "~/.config/karabiner/karabiner.json"

# Essential scripts (most commonly used)
"scripts/daily-note.nu" = "~/.local/bin/daily-note"
"scripts/daypage-template" = "~/.local/bin/daypage-template"
"scripts/hx-insert-date" = "~/.local/bin/hx-insert-date"
"scripts/hx-insert-datetime" = "~/.local/bin/hx-insert-datetime"
"scripts/search-comparison-test" = "~/.local/bin/search-comparison-test"
"scripts/hx-insert-time" = "~/.local/bin/hx-insert-time"
"scripts/hx-mark-revisit" = "~/.local/bin/hx-mark-revisit"
"scripts/new-script" = "~/.local/bin/new-script"
"scripts/obsidian-content-search-interactive.sh" = "~/.local/bin/obsidian-content-search-interactive.sh"
"scripts/obsidian-semantic-search.sh" = "~/.local/bin/obsidian-semantic-search.sh"
"nushell/scripts/quantified-tracking.nu" = "~/.config/nushell/scripts/quantified-tracking.nu"
"nushell/scripts/quantified-tracking-v2.nu" = "~/.config/nushell/scripts/quantified-tracking-v2.nu"

# Cross-platform utilities
"scripts/detect-platform" = "~/.local/bin/detect-platform"
"scripts/cross-platform-paths" = "~/.local/bin/cross-platform-paths"
"scripts/obsidian-linker-cross-platform.sh" = "~/.local/bin/obsidian-linker-cross-platform.sh"
"scripts/citation-picker-cross-platform.sh" = "~/.local/bin/citation-picker-cross-platform.sh"
# Zellij zombie prevention system (cross-platform)
"scripts/zellij-zombie-killer" = "~/.local/bin/zellij-zombie-killer" 
"scripts/setup-zellij-zombie-prevention-cross-platform" = "~/.local/bin/setup-zellij-zombie-prevention-cross-platform"
"scripts/hx-auto" = "~/.local/bin/hx-auto"
"scripts/hx-wiki" = "~/.local/bin/hx-wiki"
"scripts/obsidian-linker.sh" = "~/.local/bin/obsidian-linker.sh"
"scripts/forge-linker.nu" = "~/.local/bin/forge-linker.nu"
"scripts/semantic-indexer" = "~/.local/bin/semantic-indexer"
"scripts/semantic-query" = "~/.local/bin/semantic-query"
"scripts/zj.nu" = "~/.local/bin/zj"
"scripts/dotter-audit" = "~/.local/bin/dotter-audit"
"scripts/dotter-add" = "~/.local/bin/dotter-add"
"scripts/dotter-auto-onboard" = "~/.local/bin/dotter-auto-onboard"
"scripts/dotter-auto-onboard-simple" = "~/.local/bin/dotter-auto-onboard-simple"
"scripts/setup-realtime-onboarding" = "~/.local/bin/setup-realtime-onboarding"
"scripts/dotter-protect-all" = "~/.local/bin/dotter-protect-all"
"scripts/dotter-verify-protection" = "~/.local/bin/dotter-verify-protection"
"scripts/dotter-protect-all-cross-platform" = "~/.local/bin/dotter-protect-all-cross-platform"
"scripts/dotter-verify-protection-cross-platform" = "~/.local/bin/dotter-verify-protection-cross-platform"
"scripts/citation-picker.sh" = "~/.local/bin/citation-picker.sh"
"scripts/dotter-complete-audit" = "~/.local/bin/dotter-complete-audit"
"scripts/dotter-orphan-detector-v2" = "~/.local/bin/dotter-orphan-detector-v2"
"scripts/dotter-enforce-compliance" = "~/.local/bin/dotter-enforce-compliance"
"scripts/dotter-drift-monitor" = "~/.local/bin/dotter-drift-monitor"
"scripts/claude-docs-backup" = "~/.local/bin/claude-docs-backup"
"scripts/rotate-linkmanager-logs" = "~/.local/bin/rotate-linkmanager-logs"
"scripts/dotter-drift-cron" = "~/.local/bin/dotter-drift-cron"
"scripts/setup-drift-monitoring" = "~/.local/bin/setup-drift-monitoring"
"scripts/drift-status" = "~/.local/bin/drift-status"
"scripts/dotter-orphan-detector" = "~/.local/bin/dotter-orphan-detector"
"scripts/script-ready-deploy" = "~/.local/bin/script-ready-deploy"
"scripts/zellij-cleanup.nu" = "~/.local/bin/zellij-cleanup.nu"
"scripts/process-count.nu" = "~/.local/bin/process-count.nu"
"scripts/daily-note.nu" = "~/.local/bin/daily-note.nu"
"scripts/yazi-project-file-search-floating" = "~/.local/bin/yazi-project-file-search-floating"
"scripts/yazi-project-file-search-floating.nu" = "~/.local/bin/yazi-project-file-search-floating.nu"
"scripts/yazi-recent-files.nu" = "~/.local/bin/yazi-recent-files.nu"
"scripts/simple-file-preview" = "~/.local/bin/simple-file-preview"
"scripts/test-skim-floating" = "~/.local/bin/test-skim-floating"
"scripts/word-wrap-preview.nu" = "~/.local/bin/word-wrap-preview.nu"
"scripts/activity-duration-processor" = "~/.local/bin/activity-duration-processor"
"scripts/activity-duration-processor-buffer" = "~/.local/bin/activity-duration-processor-buffer"
"scripts/hx-process-durations-wezterm" = "~/.local/bin/hx-process-durations-wezterm"
# Re-nu conversion scripts - Native Nushell watchers with no external dependencies
"scripts/claude-docs-watcher-renu" = "~/.local/bin/claude-docs-watcher-renu"
"scripts/dotter-realtime-watcher-renu" = "~/.local/bin/dotter-realtime-watcher-renu"
"scripts/helix-activity-watcher-renu" = "~/.local/bin/helix-activity-watcher-renu"
"scripts/zellij-zombie-watcher-renu" = "~/.local/bin/zellij-zombie-watcher-renu"
"scripts/dotter-drift-watcher-renu" = "~/.local/bin/dotter-drift-watcher-renu"
"scripts/citation-watcher-renu" = "~/.local/bin/citation-watcher-renu"
"scripts/activity-watcher-renu" = "~/.local/bin/activity-watcher-renu"
"scripts/yazi-search-with-preview" = "~/.local/bin/yazi-search-with-preview"
# Zotero automation - Native Nushell versions (no fswatch dependency)
"scripts/zotero-pdf-watcher-renu" = "~/.local/bin/zotero-pdf-watcher-renu"
"scripts/zotero-bridge-renu" = "~/.local/bin/zotero-bridge-renu"

# MEDIUM PRIORITY: Additional essential scripts (added 2025-09-16)
"scripts/get-openai-key" = "~/.local/bin/get-openai-key"
"scripts/semantic-auto-update" = "~/.local/bin/semantic-auto-update"
"scripts/deploy-semantic-search" = "~/.local/bin/deploy-semantic-search"
"scripts/fix-corrupted-dates" = "~/.local/bin/fix-corrupted-dates"
"scripts/fix-date-corruption-emergency" = "~/.local/bin/fix-date-corruption-emergency"

# ESSENTIAL SKETCHYBAR CONFIGURATION (added 2025-09-16)
"sketchybar/sketchybarrc" = "~/.config/sketchybar/sketchybarrc"
"sketchybar/colors.sh" = "~/.config/sketchybar/colors.sh"
"sketchybar/items/aerospace.sh" = "~/.config/sketchybar/items/aerospace.sh"
"sketchybar/items/battery.sh" = "~/.config/sketchybar/items/battery.sh"
"sketchybar/items/calendar.sh" = "~/.config/sketchybar/items/calendar.sh"
"sketchybar/items/clock.sh" = "~/.config/sketchybar/items/clock.sh"
"sketchybar/plugins/aerospace.sh" = "~/.config/sketchybar/plugins/aerospace.sh"
"sketchybar/plugins/battery.sh" = "~/.config/sketchybar/plugins/battery.sh"
"sketchybar/plugins/calendar.sh" = "~/.config/sketchybar/plugins/calendar.sh"
"sketchybar/plugins/clock.sh" = "~/.config/sketchybar/plugins/clock.sh"

# Semantic search system - managed separately (has virtual environment)

[shared.variables]

# macOS-specific configuration
[macos]
depends = ["shared"]

[macos.files]
"shell/zshrc" = "~/.zshrc"
"wezterm/wezterm.lua" = "~/.config/wezterm/wezterm.lua"
"ghostty/config" = "~/Library/Application Support/com.mitchellh.ghostty/config"
# NOTE: Individual files managed in [shared.files] for better reliability
# Removed directory symlinks that were causing orphan detection issues

[macos.variables]
opener_cmd = "open"
clipboard_copy = "pbcopy"
clipboard_paste = "pbpaste"
terminal_emulator = "wezterm"
platform = "macos"
nushell_path = "/opt/homebrew/bin/nu"

# Linux-specific configuration  
[linux]
depends = ["shared"]

[linux.files]
"shell/bashrc" = "~/.bashrc"
# Systemd user services - Re-nu Nushell-based watchers
"systemd/dotter-realtime-watcher.service" = "~/.config/systemd/user/dotter-realtime-watcher.service"
"systemd/zotero-pdf-watcher.service" = "~/.config/systemd/user/zotero-pdf-watcher.service"
"systemd/zotero-bridge.service" = "~/.config/systemd/user/zotero-bridge.service"
# Wayland compositor configuration
"wayland/river" = { target = "~/.config/river", type = "symbolic" }
"wayland/waybar" = { target = "~/.config/waybar", type = "symbolic" }
"wayland/foot" = { target = "~/.config/foot", type = "symbolic" }

[linux.variables]
opener_cmd = "xdg-open"
clipboard_copy = "wl-copy"
clipboard_paste = "wl-paste" 
terminal_emulator = "foot"
platform = "linux"
nushell_path = "/usr/bin/nu"

# Legacy default package for compatibility
[default]
depends = ["macos"]

[default.files]

[default.variables]

"scripts/skim-with-preview" = "~/.local/bin/skim-with-preview"
"scripts/activity-watcher-simple" = "~/.local/bin/activity-watcher-simple"
"scripts/activity-watcher-fixed" = "~/.local/bin/activity-watcher-fixed"

[settings]
default_target_type = "automatic"