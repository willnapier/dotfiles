[helpers]

# Cross-platform shared configuration
[shared]
depends = []

[shared.files]
"git/gitconfig" = "~/.gitconfig"
"helix/config.toml" = "~/.config/helix/config.toml"
"nushell/config.nu" = "~/.config/nushell/config.nu"
"nushell/env.nu" = "~/.config/nushell/env.nu"
"yazi/yazi.toml" = "~/.config/yazi/yazi.toml"
"yazi/keymap.toml" = "~/.config/yazi/keymap.toml"
"yazi/theme.toml" = "~/.config/yazi/theme.toml"
"zellij/config.kdl" = "~/.config/zellij/config.kdl"
"starship.toml" = "~/.config/starship.toml"
# Directory-level management for collections
"yazi/plugins" = { target = "~/.config/yazi/plugins", type = "symbolic" }
"yazi/scripts" = { target = "~/.config/yazi/scripts", type = "symbolic" }
"yazi/flavors" = { target = "~/.config/yazi/flavors", type = "symbolic" }
"zellij/layouts" = { target = "~/.config/zellij/layouts", type = "symbolic" }
"helix/themes" = { target = "~/.config/helix/themes", type = "symbolic" }
# Neovim configuration files
"nvim/init.lua" = "~/.config/nvim/init.lua"
"nvim/lazy-lock.json" = "~/.config/nvim/lazy-lock.json"
"nvim/lua" = { target = "~/.config/nvim/lua", type = "symbolic" }
"nvim/doc" = { target = "~/.config/nvim/doc", type = "symbolic" }
"nvim/spell" = { target = "~/.config/nvim/spell", type = "symbolic" }
# Essential scripts (most commonly used)
"scripts/claude" = "~/.local/bin/claude"
"scripts/daily-note" = { target = "~/.local/bin/daily-note", type = "symbolic" }
"scripts/daypage-template" = "~/.local/bin/daypage-template"
"scripts/hx-insert-date" = "~/.local/bin/hx-insert-date"
"scripts/hx-insert-datetime" = "~/.local/bin/hx-insert-datetime"
"scripts/search-comparison-test" = "~/.local/bin/search-comparison-test"
"scripts/hx-insert-time" = "~/.local/bin/hx-insert-time"
"scripts/hx-auto" = "~/.local/bin/hx-auto"
"scripts/hx-wiki" = "~/.local/bin/hx-wiki"
"scripts/obsidian-linker.sh" = "~/.local/bin/obsidian-linker.sh"
"scripts/semantic-indexer" = "~/.local/bin/semantic-indexer"
"scripts/semantic-query" = "~/.local/bin/semantic-query"
"scripts/zj" = "~/.local/bin/zj"
"scripts/dotter-audit" = "~/.local/bin/dotter-audit"
"scripts/dotter-add" = "~/.local/bin/dotter-add"
"scripts/dotter-protect-all" = "~/.local/bin/dotter-protect-all"
"scripts/dotter-verify-protection" = "~/.local/bin/dotter-verify-protection"
"scripts/dotter-protect-all-cross-platform" = "~/.local/bin/dotter-protect-all-cross-platform"
"scripts/dotter-verify-protection-cross-platform" = "~/.local/bin/dotter-verify-protection-cross-platform"
"scripts/citation-picker.sh" = "~/.local/bin/citation-picker.sh"
"scripts/dotter-complete-audit" = "~/.local/bin/dotter-complete-audit"
"scripts/dotter-enforce-compliance" = "~/.local/bin/dotter-enforce-compliance"
"scripts/dotter-drift-monitor" = "~/.local/bin/dotter-drift-monitor"
# Semantic search system - managed separately (has virtual environment)

[shared.variables]

# macOS-specific configuration
[macos]
depends = ["shared"]

[macos.files]
"shell/zshrc" = "~/.zshrc"
"wezterm/wezterm.lua" = "~/.config/wezterm/wezterm.lua"
"ghostty/config" = "~/Library/Application Support/com.mitchellh.ghostty/config"
"ghostty/themes" = { target = "~/.config/ghostty/themes", type = "symbolic" }
"karabiner" = { target = "~/.config/karabiner", type = "symbolic" }
"aerospace" = { target = "~/.config/aerospace", type = "symbolic" }
"sketchybar" = { target = "~/.config/sketchybar", type = "symbolic" }

[macos.variables]
opener_cmd = "open"
clipboard_copy = "pbcopy"
clipboard_paste = "pbpaste"
terminal_emulator = "wezterm"
platform = "macos"
nushell_path = "/opt/homebrew/bin/nu"

# Linux-specific configuration  
[linux]
depends = ["shared"]

[linux.files]
"shell/bashrc" = "~/.bashrc"
"wayland/river" = { target = "~/.config/river", type = "symbolic" }
"wayland/waybar" = { target = "~/.config/waybar", type = "symbolic" }
"wayland/foot" = { target = "~/.config/foot", type = "symbolic" }

[linux.variables]
opener_cmd = "xdg-open"
clipboard_copy = "wl-copy"
clipboard_paste = "wl-paste" 
terminal_emulator = "foot"
platform = "linux"
nushell_path = "/usr/bin/nu"

# Legacy default package for compatibility
[default]
depends = ["macos"]

[default.files]

[default.variables]

[settings]
default_target_type = "automatic"