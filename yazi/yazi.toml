# Yazi configuration file
"$schema" = "https://yazi-rs.github.io/schemas/yazi.json"

[mgr]
ratio          = [0, 2, 4]
sort_by        = "natural"
sort_sensitive = false
sort_reverse   = false
sort_dir_first = true
sort_translit  = false
linemode       = "none"
show_hidden    = false
show_symlink   = true
scrolloff      = 5
mouse_events   = ["click", "scroll"]
title_format   = "Yazi: {cwd}"

[preview]
wrap         = "no"
tab_size     = 2
max_width    = 600
max_height   = 900
cache_dir    = ""
image_delay  = 30
image_filter = "triangle"
image_quality = 75
sixel_fraction = 15
ueberzug_scale = 1
ueberzug_offset = [0, 0, 0, 0]

[opener]
# Text editors
edit = [
  { run = '${EDITOR:-vi} "$@"', desc = "$EDITOR", block = true, for = "unix" },
]

# Helix editor specifically
helix = [
  { run = 'hx "$@"', desc = "Helix", block = true, for = "unix" },
]

# macOS specific openers
open = [
  { run = 'open "$@"', desc = "Open", for = "macos" },
  { run = 'xdg-open "$@"', desc = "Open", for = "linux" },
]

reveal = [
  { run = 'open -R "$@"', desc = "Reveal in Finder", for = "macos" },
  { run = 'nautilus "$@"', desc = "Reveal in Files", for = "linux" },
]

# Archive extraction
extract = [
  { run = 'unar "$1"', desc = "Extract here", for = "unix" },
  { run = 'tar -xvf "$1"', desc = "Extract tar", for = "unix" },
]

# Media players
play = [
  { run = 'mpv "$@"', orphan = true, for = "unix" },
  { run = 'vlc "$@"', orphan = true, for = "unix" },
]

[open]
rules = [
  # Directories - handled by Yazi internally, no external opener needed
  # { name = "*/", use = [ "open", "reveal" ] },
  
  # Text files - use Helix as primary, with edit and system open as alternatives
  { mime = "text/*", use = [ "helix", "edit", "open", "reveal" ] },
  { mime = "inode/x-empty", use = [ "helix", "edit", "open", "reveal" ] },
  
  # Code files - use Helix as primary
  { mime = "application/json", use = [ "helix", "edit", "open", "reveal" ] },
  { mime = "*/javascript", use = [ "helix", "edit", "open", "reveal" ] },
  { mime = "application/x-yaml", use = [ "helix", "edit", "open", "reveal" ] },
  { mime = "application/xml", use = [ "helix", "edit", "open", "reveal" ] },
  { mime = "*/xml", use = [ "helix", "edit", "open", "reveal" ] },
  
  # Images
  { mime = "image/*", use = [ "open", "reveal" ] },
  
  # Videos
  { mime = "video/*", use = [ "play", "reveal" ] },
  
  # Audio
  { mime = "audio/*", use = [ "play", "reveal" ] },
  
  # Archives
  { mime = "application/zip", use = [ "extract", "reveal" ] },
  { mime = "application/gzip", use = [ "extract", "reveal" ] },
  { mime = "application/x-tar", use = [ "extract", "reveal" ] },
  { mime = "application/x-bzip", use = [ "extract", "reveal" ] },
  { mime = "application/x-bzip2", use = [ "extract", "reveal" ] },
  { mime = "application/x-7z-compressed", use = [ "extract", "reveal" ] },
  { mime = "application/x-rar", use = [ "extract", "reveal" ] },
  { mime = "application/x-xz", use = [ "extract", "reveal" ] },
  
  # PDF
  { mime = "application/pdf", use = [ "open", "reveal" ] },
  
  # Fallback
  { name = "*", use = [ "open", "reveal" ] },
]

[tasks]
micro_workers = 10
macro_workers = 5
bizarre_retry = 3
image_alloc = 536870912
image_bound = [0, 0]
suppress_preload = false

[plugin]
previewers = [
  { name = "*/", run = "folder", sync = true },
  { mime = "text/*", run = "code" },
  { mime = "*/xml", run = "code" },
  { mime = "*/javascript", run = "code" },
  { mime = "*/x-wine-extension-ini", run = "code" },
  
  { mime = "image/*", run = "image" },
  { mime = "video/*", run = "video" },
  { mime = "application/pdf", run = "pdf" },
  
  { mime = "application/json", run = "json" },
  { mime = "application/zip", run = "archive" },
  { mime = "application/gzip", run = "archive" },
  { mime = "application/x-tar", run = "archive" },
  { mime = "application/x-bzip", run = "archive" },
  { mime = "application/x-bzip2", run = "archive" },
  { mime = "application/x-7z-compressed", run = "archive" },
  { mime = "application/x-rar", run = "archive" },
  { mime = "application/x-xz", run = "archive" },
  
  { name = "*", run = "file" },
]

preloaders = [
  { name = "*/", run = "folder", prio = "low" },
  { mime = "image/*", run = "image" },
  { mime = "video/*", run = "video" },
]

[input]
cursor_blink = true

# cd
cd_title  = "Change directory:"
cd_origin = "top-center"
cd_offset = [ 0, 2, 50, 50 ]

# create
create_title  = ["Create:", "Create (dir):"]
create_origin = "top-center"
create_offset = [ 0, 2, 50, 50 ]

# rename
rename_title  = "Rename:"
rename_origin = "hovered"
rename_offset = [ 0, 1, 50, 50 ]

# trash
trash_title   = "Move {n} selected file{s} to trash? (y/N)"
trash_origin  = "top-center"
trash_offset  = [ 0, 2, 50, 50 ]

# delete
delete_title   = "Delete {n} selected file{s} permanently? (y/N)"
delete_origin  = "top-center"
delete_offset  = [ 0, 2, 50, 50 ]

# filter
filter_title  = "Filter:"
filter_origin = "top-center"
filter_offset = [ 0, 2, 50, 50 ]

# find
find_title  = ["Find next:", "Find previous:"]
find_origin = "top-center"
find_offset = [ 0, 2, 50, 50 ]

# search
search_title  = "Search via {n}:"
search_origin = "top-center"
search_offset = [ 0, 2, 50, 50 ]

# shell
shell_title  = ["Shell:", "Shell (block):"]
shell_origin = "top-center"
shell_offset = [ 0, 2, 50, 50 ]

# overwrite
overwrite_title  = "Overwrite an existing file? (y/N)"
overwrite_origin = "top-center"
overwrite_offset = [ 0, 2, 50, 50 ]

# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [ 0, 2, 50, 50 ]

[confirm]
# quit
quit_title  = "{n} task{s} running, sure to quit? (y/N)"
quit_origin = "top-center"
quit_offset = [ 0, 2, 50, 50 ]

[pick]
open_title  = "Open with:"
open_origin = "hovered"
open_offset = [ 0, 1, 50, 50 ]

[which]
sort_by        = "none"
sort_sensitive = false
sort_reverse   = false
sort_translit  = false
